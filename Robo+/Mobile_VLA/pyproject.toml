[tool.poetry]
name = "mobile-vla"
version = "0.1.0"
description = "Mobile Vision-Language-Action System - Pure Mobile VLA without Calvin dependencies"
authors = ["Mobile VLA Team <mobile-vla@example.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/your-repo/mobile-vla"
keywords = ["robotics", "vision-language", "mobile-robot", "vla", "navigation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
# 🔥 Core Deep Learning (RoboVLMs 호환)
torch = "2.3.0"
torchvision = "0.18.0"
torchaudio = "2.3.0"
# 🤖 Transformers & VLMs (RoboVLMs 호환)
transformers = "4.41.2"
# 📊 Data & Scientific Computing (RoboVLMs 호환)
numpy = "<2.0"
h5py = "^3.8.0"
pillow = "^9.5.0"
pyarrow = ">=8.0.0,<15.0.0"  # datasets 2.12.0 호환
# 📈 Training & Utilities (RoboVLMs 호환)
tqdm = "^4.65.0"
einops = "^0.8.0"
# 🧪 RoboVLMs 추가 의존성
accelerate = "^1.7.0"
datasets = "2.12.0"
opencv-python = "^4.11.0"
omegaconf = "^2.3.0"
timm = "^1.0.15"
# 📊 Visualization (optional)
matplotlib = {version = "^3.6.0", optional = true}
seaborn = {version = "^0.12.0", optional = true}

[tool.poetry.group.training.dependencies]
# ⚡ Lightning Framework (RoboVLMs 호환)
lightning = "^2.2.5"
pytorch-lightning = "^1.8.6"
lightning-utilities = "^0.8.0"
# 📊 Logging & Monitoring (RoboVLMs 호환)
tensorboard = "^2.13.0"
tensorboardx = "^2.6.2"
wandb = "^0.19.0"
# 🔧 RoboVLMs 추가 의존성
deepspeed = "^0.15.0"
hydra-core = "^1.1.1"
hydra-colorlog = "^1.2.0"
pyyaml = "^6.0"

[tool.poetry.group.notebook.dependencies]
# 📓 Jupyter Environment
jupyter = "^1.0.0"
notebook = "^6.5.4"
ipykernel = "^6.22.0"
ipywidgets = "^8.0.0"
# 📊 Visualization (RoboVLMs 호환)
matplotlib = "^3.6.0"
seaborn = "^0.12.0"
plotly = "^5.14.0"
# 🧪 RoboVLMs 추가 의존성 
sentence-transformers = "2.2.2"
open-clip-torch = "2.20.0"
diffusers = "^0.31.0"

[tool.poetry.group.dev.dependencies]
# 🧪 Testing
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
# 🔍 Code Quality
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.3.0"
# 📚 Documentation
sphinx = "^6.2.0"
sphinx-rtd-theme = "^1.2.0"

[tool.poetry.group.ros]
optional = true

[tool.poetry.group.ros.dependencies]
# 🤖 ROS2 Integration (optional) - 실제 ROS 환경에서만 설치

[tool.poetry.extras]
# 📊 Visualization extras
viz = ["matplotlib", "seaborn", "plotly"]
# 📈 Training monitoring (RoboVLMs 호환)
monitoring = ["wandb", "tensorboard", "tensorboardx"]
# 🤖 ROS integration (commented out - install manually in ROS environment)
# ros = ["rclpy"]
# 📓 Complete notebook environment (RoboVLMs 호환)
notebook = ["jupyter", "notebook", "ipykernel", "ipywidgets", "matplotlib", "seaborn", "plotly", "sentence-transformers", "open-clip-torch", "diffusers"]
# 🔬 Full development environment (RoboVLMs 호환)
full = ["matplotlib", "seaborn", "plotly", "wandb", "tensorboard", "tensorboardx", "jupyter", "notebook", "ipykernel", "ipywidgets", "sentence-transformers", "open-clip-torch", "diffusers", "deepspeed", "hydra-core"]
# 🧪 RoboVLMs 호환 환경
robovlms = ["accelerate", "datasets", "opencv-python", "omegaconf", "timm", "sentence-transformers", "open-clip-torch", "diffusers"]

[tool.poetry.scripts]
# 🚀 Training scripts
mobile-vla-train = "mobile_vla.training.train_mobile_vla:main"
mobile-vla-kosmos = "mobile_vla.training.train_kosmos_mobile:main"
# 🧪 Testing scripts
mobile-vla-test = "mobile_vla.data.mobile_dataset:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# 🔧 Tool configurations

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["mobile_vla"]
known_third_party = ["torch", "transformers", "numpy", "h5py", "PIL", "tqdm", "lightning", "accelerate", "datasets", "cv2", "omegaconf", "timm", "sentence_transformers", "open_clip", "diffusers", "deepspeed", "hydra"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "h5py.*",
    "transformers.*",
    "lightning.*",
    "pytorch_lightning.*",
    "einops.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "accelerate.*",
    "datasets.*",
    "cv2.*",
    "omegaconf.*",
    "timm.*",
    "sentence_transformers.*",
    "open_clip.*",
    "diffusers.*",
    "deepspeed.*",
    "hydra.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU"
]

[tool.coverage.run]
source = ["mobile_vla"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
