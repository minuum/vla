#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import CompressedImage
import cv2
import numpy as np
import time
from std_msgs.msg import String
import threading

class TestCameraSimulator(Node):
    """
    üé® Ìñ•ÏÉÅÎêú ÌÖåÏä§Ìä∏Ïö© Ïπ¥Î©îÎùº ÏãúÎÆ¨Î†àÏù¥ÌÑ∞
    camera_publisher_continuous.py Í∏∞Î∞òÏúºÎ°ú Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ
    """
    
    def __init__(self):
        super().__init__('test_camera_simulator')
        
        # Ïù¥ÎØ∏ÏßÄ ÌçºÎ∏îÎ¶¨ÏÖî (QoS ÏÑ§Ï†ï Ï∂îÍ∞Ä)
        from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy
        qos = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            depth=1
        )
        
        self.image_pub = self.create_publisher(
            CompressedImage,
            '/camera/image/compressed',
            qos
        )
        
        # Ï†úÏñ¥ ÏÑúÎ∏åÏä§ÌÅ¨ÎùºÏù¥Î≤Ñ
        self.control_sub = self.create_subscription(
            String,
            '/camera_simulator/control',
            self.control_callback,
            10
        )
        
        # ÏÉÅÌÉú Î≥ÄÏàò
        self.is_running = True
        self.frame_rate = 30.0  # 30HzÎ°ú Ï¶ùÍ∞Ä
        self.image_width = 1280  # Í≥†Ìï¥ÏÉÅÎèÑÎ°ú Ï¶ùÍ∞Ä
        self.image_height = 720
        self.color_shift = 0
        self.frame_count = 0
        self.last_log_time = time.time()
        
        # Ïä§Î†àÎìú ÏïàÏ†ÑÏÑ±ÏùÑ ÏúÑÌïú ÎùΩ
        self.buffer_lock = threading.Lock()
        
        # ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
        self.timer = self.create_timer(1.0 / self.frame_rate, self.publish_image)
        
        self.get_logger().info("üé® Enhanced Test Camera Simulator initialized")
        self.get_logger().info(f"üì∏ Resolution: {self.image_width}x{self.image_height}")
        self.get_logger().info(f"‚ö° Frame Rate: {self.frame_rate} Hz")
        self.get_logger().info(f"üì° Topic: /camera/image/compressed")
    
    def control_callback(self, msg):
        """Ï†úÏñ¥ Î™ÖÎ†π ÏΩúÎ∞±"""
        try:
            command = msg.data
            if command == 'stop':
                self.is_running = False
                self.get_logger().info("üõë Camera simulator stopped")
            elif command == 'start':
                self.is_running = True
                self.get_logger().info("‚ñ∂Ô∏è Camera simulator started")
            elif command.startswith('rate:'):
                new_rate = float(command.split(':')[1])
                self.frame_rate = new_rate
                self.timer.destroy()
                self.timer = self.create_timer(1.0 / self.frame_rate, self.publish_image)
                self.get_logger().info(f"‚ö° Frame rate changed to {new_rate} Hz")
            elif command == 'status':
                self.get_logger().info(f"üìä Status: Running={self.is_running}, FPS={self.frame_rate}, Frames={self.frame_count}")
        except Exception as e:
            self.get_logger().error(f"‚ùå Error processing control command: {e}")
    
    def generate_test_image(self):
        """üé® Ìñ•ÏÉÅÎêú ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± (Ïªµ ÏãúÎÆ¨Î†àÏù¥ÏÖò)"""
        with self.buffer_lock:
            # Í≥†Ìï¥ÏÉÅÎèÑ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
            image = np.zeros((self.image_height, self.image_width, 3), dtype=np.uint8)
            
            # Î∞∞Í≤Ω Í∑∏ÎùºÎç∞Ïù¥ÏÖò (Îçî Î∂ÄÎìúÎüΩÍ≤å)
            for y in range(self.image_height):
                for x in range(self.image_width):
                    r = int(50 + 50 * np.sin(x / 100 + self.color_shift))
                    g = int(100 + 50 * np.sin(y / 100 + self.color_shift))
                    b = int(50 + 50 * np.sin((x + y) / 200 + self.color_shift))
                    image[y, x] = [r, g, b]
            
            # üèÜ Ïªµ ÏãúÎÆ¨Î†àÏù¥ÏÖò (Mobile VLAÏö©)
            center_x, center_y = self.image_width // 2, self.image_height // 2
            
            # Ïªµ Î≥∏Ï≤¥ (ÏõêÌòï)
            cv2.circle(image, (center_x, center_y), 80, (200, 150, 100), -1)
            cv2.circle(image, (center_x, center_y), 80, (100, 50, 0), 3)
            
            # Ïªµ ÏïàÏ™Ω (ÏùåÎ£å)
            cv2.circle(image, (center_x, center_y), 60, (0, 100, 200), -1)
            
            # Ïªµ ÏÜêÏû°Ïù¥
            handle_x = center_x + 100
            cv2.ellipse(image, (handle_x, center_y), (20, 40), 0, 0, 180, (150, 100, 50), 5)
            
            # ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
            cv2.putText(image, f'Mobile VLA Cup Simulation', 
                       (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1.2, (255, 255, 255), 3)
            cv2.putText(image, f'Frame: {self.frame_count} | Time: {time.time():.1f}', 
                       (20, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
            cv2.putText(image, f'Target: CUP', 
                       (center_x - 60, center_y + 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            # ÏÉâÏÉÅ Î≥ÄÌôî
            self.color_shift += 0.05
            
            return image
    
    def publish_image(self):
        """üì∏ Ïù¥ÎØ∏ÏßÄ Î∞úÌñâ (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)"""
        if not self.is_running:
            return
        
        try:
            # ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
            image = self.generate_test_image()
            
            # BGR to RGB Î≥ÄÌôò
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # ÏïïÏ∂ïÎêú Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò (Í≥†ÌíàÏßà)
            encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 95]
            _, compressed_data = cv2.imencode('.jpg', image_rgb, encode_param)
            
            # CompressedImage Î©îÏãúÏßÄ ÏÉùÏÑ±
            msg = CompressedImage()
            msg.header.stamp = self.get_clock().now().to_msg()
            msg.header.frame_id = 'camera_frame'
            msg.format = 'jpeg'
            msg.data = compressed_data.tobytes()
            
            # Ïù¥ÎØ∏ÏßÄ Î∞úÌñâ
            self.image_pub.publish(msg)
            
            # ÌîÑÎ†àÏûÑ Ïπ¥Ïö¥ÌÑ∞ Ï¶ùÍ∞Ä
            self.frame_count += 1
            
            # Ï£ºÍ∏∞Ï†Å Î°úÍπÖ (1Ï¥àÎßàÎã§)
            current_time = time.time()
            if current_time - self.last_log_time >= 1.0:
                fps = self.frame_count / (current_time - self.last_log_time + 1.0)
                self.get_logger().info(f"üì∏ Published frame {self.frame_count} | FPS: {fps:.1f} | Size: {len(compressed_data)} bytes")
                self.frame_count = 0
                self.last_log_time = current_time
            
        except Exception as e:
            self.get_logger().error(f"‚ùå Error publishing image: {e}")

def main(args=None):
    rclpy.init(args=args)
    
    node = TestCameraSimulator()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("üõë Camera simulator interrupted by user")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
