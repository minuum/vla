# =============================================================================
# 🚀 Jetson Orin NX 최적화 Mobile VLA Docker 환경
# JetPack 6.0 (L4T R36.4) 기반 - 2025년 최신 버전
# =============================================================================

# 1️⃣ NVIDIA Jetson 최신 베이스 이미지 (L4T R36.4 + PyTorch 2.6)
FROM dustynv/pytorch:2.6-r36.4.0

# 2️⃣ 메타데이터
LABEL maintainer="Mobile VLA Team"
LABEL description="Jetson Orin NX 최적화 Mobile VLA + ROS2 Humble 통합 환경"
LABEL version="1.0.0"
LABEL jetpack.version="6.0"
LABEL l4t.version="36.4.0"

# 3️⃣ 환경 변수 설정
ENV DEBIAN_FRONTEND=noninteractive
ENV RMW_IMPLEMENTATION=rmw_cyclonedx_cpp
ENV PYTHONUNBUFFERED=1
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# ROS2 환경 변수
ENV ROS_DISTRO=humble
ENV ROS_DOMAIN_ID=42
ENV ROS_LOCALHOST_ONLY=0

# CUDA 환경 변수 (JetPack 6.0 기준)
ENV CUDA_HOME=/usr/local/cuda-12.2
ENV PATH=/usr/local/cuda-12.2/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:$LD_LIBRARY_PATH

# PyTorch/NVIDIA 최적화
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV TORCH_DTYPE=float16
ENV TRANSFORMERS_CACHE=/workspace/.cache/huggingface
ENV HF_HOME=/workspace/.cache/huggingface

# 4️⃣ 작업 디렉토리 설정
WORKDIR /workspace

# 5️⃣ 시스템 패키지 업데이트 및 필수 유틸리티 설치
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 기본 유틸리티
    curl wget gnupg lsb-release ca-certificates \
    git vim nano htop tree \
    # 빌드 도구
    build-essential cmake pkg-config \
    # Python 개발 도구
    python3-pip python3-dev python3-venv \
    # OpenCV/이미지 처리 의존성
    libopencv-dev python3-opencv \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
    gstreamer1.0-libav gstreamer1.0-tools \
    # 오디오/비디오 라이브러리
    libasound2-dev portaudio19-dev \
    ffmpeg libavformat-dev libavcodec-dev libswresample-dev \
    # HDF5 (Mobile VLA 데이터 저장용)
    libhdf5-dev hdf5-tools \
    # 네트워킹/통신
    openssh-client rsync \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# 6️⃣ ROS2 Humble 설치 (Jetson에 최적화된 방식)
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
    && apt-get update && apt-get install -y --no-install-recommends \
        ros-humble-desktop-full \
        ros-dev-tools \
        python3-colcon-common-extensions \
        python3-rosdep \
        ros-humble-cv-bridge \
        ros-humble-image-transport \
        ros-humble-camera-info-manager \
        ros-humble-rmw-cyclonedx-cpp \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# 7️⃣ rosdep 초기화
RUN rosdep init || true && rosdep update

# 8️⃣ Python 의존성 설치 (Mobile VLA + RoboVLMs 통합)
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir \
        # PyTorch 생태계 (Jetson에 최적화됨)
        transformers==4.41.2 \
        accelerate>=1.7.0 \
        safetensors>=0.3.0 \
        tokenizers==0.21.1 \
        # 컴퓨터 비전
        opencv-python==4.11.0.86 \
        pillow \
        einops>=0.8.1 \
        # 과학 계산
        numpy\<2.0 \
        scipy \
        scikit-learn \
        # 데이터 처리
        h5py \
        pandas \
        # 유틸리티
        tqdm>=4.65.0 \
        omegaconf>=2.3.0 \
        pyyaml>=6.0 \
        # 오디오 처리
        librosa \
        soundfile \
        # 로깅/모니터링
        wandb \
        tensorboard \
        # ROS2 Python 지원
        rclpy

# 9️⃣ Mobile VLA 전용 Python 패키지
RUN pip3 install --no-cache-dir \
        # 키보드 입력 처리
        keyboard \
        # 시리얼 통신 (로봇 제어용)
        pyserial \
        # 네트워킹
        requests \
        # 날짜/시간 처리
        python-dateutil

# 🔟 Poetry 설치 (RoboVLMs 호환성)
RUN curl -sSL https://install.python-poetry.org | python3 - \
    && ln -s /root/.local/bin/poetry /usr/local/bin/poetry

# 1️⃣1️⃣ 작업공간 디렉토리 생성
RUN mkdir -p /workspace/vla \
    && mkdir -p /workspace/vla/ROS_action \
    && mkdir -p /workspace/vla/mobile_vla_dataset \
    && mkdir -p /workspace/vla/.cache/huggingface \
    && mkdir -p /workspace/vla/logs

# 1️⃣2️⃣ .bashrc 설정 (ROS2 자동 소싱 + 유용한 alias)
RUN echo '' >> /root/.bashrc && \
    echo '# ==============================================================================' >> /root/.bashrc && \
    echo '# 🚀 Mobile VLA Docker 환경 설정' >> /root/.bashrc && \
    echo '# ==============================================================================' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# ROS2 Humble 환경 자동 소싱' >> /root/.bashrc && \
    echo 'source /opt/ros/humble/setup.bash' >> /root/.bashrc && \
    echo 'export ROS_DOMAIN_ID=42' >> /root/.bashrc && \
    echo 'export ROS_LOCALHOST_ONLY=0' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# ROS_action 워크스페이스 자동 소싱 (존재할 경우)' >> /root/.bashrc && \
    echo 'if [ -f "/workspace/vla/ROS_action/install/setup.bash" ]; then' >> /root/.bashrc && \
    echo '    source /workspace/vla/ROS_action/install/setup.bash' >> /root/.bashrc && \
    echo 'fi' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# CUDA 환경 확인' >> /root/.bashrc && \
    echo 'export CUDA_VISIBLE_DEVICES=0' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# 유용한 alias' >> /root/.bashrc && \
    echo 'alias ll="ls -alF"' >> /root/.bashrc && \
    echo 'alias la="ls -A"' >> /root/.bashrc && \
    echo 'alias l="ls -CF"' >> /root/.bashrc && \
    echo 'alias ..="cd .."' >> /root/.bashrc && \
    echo 'alias grep="grep --color=auto"' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# Mobile VLA 전용 alias' >> /root/.bashrc && \
    echo 'alias vla-build="cd /workspace/vla/ROS_action && colcon build"' >> /root/.bashrc && \
    echo 'alias vla-source="source /workspace/vla/ROS_action/install/setup.bash"' >> /root/.bashrc && \
    echo 'alias vla-camera="ros2 run camera_pub camera_publisher_continuous"' >> /root/.bashrc && \
    echo 'alias vla-collect="cd /workspace/vla && python mobile_vla_data_collector.py"' >> /root/.bashrc && \
    echo 'alias cuda-test="python -c \"import torch; print(f\\\"PyTorch: {torch.__version__}\\\"); print(f\\\"CUDA Available: {torch.cuda.is_available()}\\\"); print(f\\\"CUDA Device: {torch.cuda.get_device_name(0) if torch.cuda.is_available() else \\\"N/A\\\"}\\\")\"' >> /root/.bashrc && \
    echo '' >> /root/.bashrc && \
    echo '# 환영 메시지' >> /root/.bashrc && \
    echo 'echo "🚀 Mobile VLA Docker 환경에 오신 것을 환영합니다!"' >> /root/.bashrc && \
    echo 'echo "📋 유용한 명령어:"' >> /root/.bashrc && \
    echo 'echo "   vla-build    : ROS2 워크스페이스 빌드"' >> /root/.bashrc && \
    echo 'echo "   vla-source   : ROS2 환경 소싱"' >> /root/.bashrc && \
    echo 'echo "   vla-camera   : CSI 카메라 노드 실행"' >> /root/.bashrc && \
    echo 'echo "   vla-collect  : Mobile VLA 데이터 수집 시작"' >> /root/.bashrc && \
    echo 'echo "   cuda-test    : CUDA/PyTorch 상태 확인"' >> /root/.bashrc && \
    echo 'echo ""' >> /root/.bashrc

# 1️⃣3️⃣ 헬스체크 스크립트 생성
RUN echo '#!/bin/bash' > /usr/local/bin/healthcheck.sh && \
    echo 'echo "🔍 Mobile VLA Docker 환경 상태 확인..."' >> /usr/local/bin/healthcheck.sh && \
    echo 'python3 -c "import torch; print(f\"✅ PyTorch {torch.__version__} - CUDA: {torch.cuda.is_available()}\")"' >> /usr/local/bin/healthcheck.sh && \
    echo 'python3 -c "import cv2; print(f\"✅ OpenCV {cv2.__version__}\")"' >> /usr/local/bin/healthcheck.sh && \
    echo 'python3 -c "import transformers; print(f\"✅ Transformers {transformers.__version__}\")"' >> /usr/local/bin/healthcheck.sh && \
    echo 'source /opt/ros/humble/setup.bash && echo "✅ ROS2 Humble 준비 완료"' >> /usr/local/bin/healthcheck.sh && \
    echo 'echo "🎉 모든 시스템 정상!"' >> /usr/local/bin/healthcheck.sh && \
    chmod +x /usr/local/bin/healthcheck.sh

# 1️⃣4️⃣ 컨테이너 시작 스크립트
RUN echo '#!/bin/bash' > /usr/local/bin/start-mobile-vla.sh && \
    echo 'set -e' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'echo "🚀 Mobile VLA Docker 환경 시작 중..."' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '# ROS2 환경 설정' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'export ROS_DOMAIN_ID=42' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '# ROS_action 워크스페이스 빌드 (처음 한 번만)' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'if [ -d "/workspace/vla/ROS_action/src" ] && [ ! -d "/workspace/vla/ROS_action/install" ]; then' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '    echo "📦 ROS_action 워크스페이스 빌드 중..."' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '    cd /workspace/vla/ROS_action' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '    colcon build --packages-select camera_pub' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '    source install/setup.bash' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '    echo "✅ ROS_action 빌드 완료"' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'fi' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '# 헬스체크 실행' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '/usr/local/bin/healthcheck.sh' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '' >> /usr/local/bin/start-mobile-vla.sh && \
    echo '# 무한 대기 (컨테이너 유지)' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'echo "💤 컨테이너 준비 완료. 다른 터미널에서 접속하세요."' >> /usr/local/bin/start-mobile-vla.sh && \
    echo 'tail -f /dev/null' >> /usr/local/bin/start-mobile-vla.sh && \
    chmod +x /usr/local/bin/start-mobile-vla.sh

# 1️⃣5️⃣ 볼륨 마운트 포인트 생성
VOLUME ["/workspace/vla", "/workspace/vla/.cache"]

# 1️⃣6️⃣ 포트 노출 (디버깅/모니터링용)
EXPOSE 8888 6006

# 1️⃣7️⃣ 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# 1️⃣8️⃣ 기본 실행 명령어
CMD ["/usr/local/bin/start-mobile-vla.sh"]